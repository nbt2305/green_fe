@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@using GreenGardenClient.Models


 

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Tạo đơn hàng | Đặt vé</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Main CSS-->
    <link rel="stylesheet" type="text/css" href="~/css/main.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
    <!-- or -->
    <link rel="stylesheet" href="https://unpkg.com/boxicons@latest/css/boxicons.min.css">

    <!-- Font-icon css-->
    <link rel="stylesheet" type="text/css"
          href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.css">




</head>
<header class="app-header">
    <!-- Sidebar toggle button--><a class="app-sidebar__toggle" href="#" data-toggle="sidebar"
                                    aria-label="Hide Sidebar"></a>
    <!-- Navbar Right Menu-->
    <ul class="app-nav">


        <!-- User Menu-->
        <li>
            <a class="app-nav__item" href="/index.html"><i class='bx bx-log-out bx-rotate-180'></i> </a>

        </li>
    </ul>
</header>
<style>
    .product-card {
        padding: 15px;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: none; /* Bỏ viền */
        border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* Dấu gạch mờ ngăn cách */
    }

        .product-card:last-child {
            border-bottom: none; /* Bỏ dấu gạch mờ ở sản phẩm cuối cùng */
        }

    .product-image img {
        max-width: 80px;
        border-radius: 5px;
    }

    .product-details {
        flex: 1;
        margin-left: 15px;
    }

    .product-name {
        font-weight: bold;
        color: #d9534f;
    }

    .product-description {
        font-size: 0.9em;
        color: #555;
    }

    .product-price {
        font-weight: bold;
        color: #000;
    }

    .discounted-price {
        text-decoration: line-through;
        color: gray;
    }

    .btn-add {
        background-color: #d9534f;
        color: white;
    }

    .quantity-control {
        display: flex;
        align-items: center;
    }

    .btn-quantity {
        background-color: transparent;
        border: none;
        font-size: 18px; /* Kích thước nhỏ hơn */
        color: red;
        cursor: pointer;
        padding: 5px 10px;
    }

    .quantity-value {
        margin: 0 10px;
        font-size: 13px; /* Kích thước nhỏ hơn */
        font-weight: bold;
    }

    .search-container {
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .search-container label {
            margin-right: 10px; /* Khoảng cách giữa nhãn và ô input */
            font-weight: bold; /* Làm đậm nhãn để giống trong hình */
        }

        .search-container input {
            background-color: #f5f5f5; /* Màu nền cho ô input */
            border: 1px solid #ddd; /* Viền nhạt cho ô input */
            padding: 5px;
            border-radius: 5px; /* Bo góc cho ô input */
            width: 200px; /* Độ rộng cho ô input */
        }

    .pagination {
        display: flex;
        align-items: center;
        justify-content: flex-end; /* Căn chỉnh các phần tử về phía bên phải */
    }

    .container-pagination-cart {
        display: flex;
        justify-content: space-between; /* Đưa nút giỏ hàng sang trái và phân trang sang phải */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-bottom: 20px; /* Khoảng cách dưới nếu cần */
    }

    .pagination {
        list-style: none; /* Bỏ các dấu bullet */
        padding: 0;
        margin: 0;
        display: flex; /* Hiển thị các mục theo hàng ngang */
    }

        .pagination li {
            margin-left: 5px; /* Khoảng cách giữa các nút */
        }

    .page-link {
        text-decoration: none;
        padding: 5px 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        color: #007bff;
    }

    .btn-primary {
        display: flex;
        align-items: center;
        font-size: 16px;
        padding: 5px 10px;
    }


    /* Đặt nền màu #eee cho cả header và sidebar */
    .app-header, .app-sidebar {
        background-color: #eee;
    }

    .app-header {
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        width: 100%;
        display: flex;
        align-items: center;
        padding: 15px;
        z-index: 1;

    }

        .app-header .app-nav {
            margin-left: auto;
        }

    .app-nav__item {
        text-decoration: none;
        color: #333;
        padding: 8px 15px;
        display: flex;
        align-items: center;
    }

    .app-sidebar {
        position: fixed;
        top: 0px; /* Để không đè lên header */
        left: 0;
        width: 250px;
        height: 100%;
        padding-top: 20px;
        background-color: #eee;
        border-right: 1px solid #ccc; /* Viền phải của sidebar */
    }


    .app-sidebar__user {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .app-sidebar__user-avatar {
        width: 100px; /* hoặc một giá trị cụ thể khác tùy thuộc vào kích thước bạn muốn */
        height: 100px; /* cần phải bằng width */
        border-radius: 50%;
        margin-right: 10px;
        object-fit: cover; /* Đảm bảo hình ảnh không bị méo */
    }

    .app-sidebar__user-name {
        margin: 0;
        font-weight: bold;
        color: black;
    }

    .app-sidebar__user-designation {
        margin: 0;
        color: black;
    }

    .app-menu {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .app-menu__item {
        text-decoration: none;
        color: #333;
        display: flex;
        align-items: center;
        padding: 10px 20px;
        transition: background-color 0.3s ease;
    }

        .app-menu__item:hover {
            background-color: #ddd;
        }

    .app-menu__icon {
        margin-right: 10px;
        color: #333;
    }

    .app-menu__item.active {
        background-color: #ccc;
        font-weight: bold;
    }

    hr {
        border: 1px solid #ccc;
        margin: 10px 0;
    }
    /* Ẩn submenu mặc định */
    .submenu {
        display: none;
        list-style-type: none;
        padding-left: 20px;
    }

    /* Hiển thị submenu khi có class 'open' */
    .has-submenu.open .submenu {
        display: block;
    }
    /* chỉnh icon cho app menu' */
    .app-menu__item {
        text-decoration: none;
        color: #333;
        padding: 10px 20px;
        display: block;
        transition: background-color 0.3s ease;
    }

        .app-menu__item:hover {
            background-color: #ddd;
        }

    .submenu .app-menu__item {
        padding-left: 40px; /* Đẩy các mục con thụt vào */
    }

    .app-menu__item {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: #333;
        padding: 10px 20px;
        transition: background-color 0.3s ease;
    }

        .app-menu__item i {
            margin-right: 10px; /* Khoảng cách giữa icon và chữ */
            font-size: 18px; /* Kích thước icon */
        }

        .app-menu__item:hover {
            background-color: #ddd;
        }

    .top-bar {
        background-color: #f8f9fa; /* Light gray background */
        padding: 10px 20px;
        border-radius: 8px;
    }

        /* Link button styling */
        .top-bar .btn {
            margin-left: 10px;
            color: #343a40; /* Default dark color for text */
        }

    /* Active link styling */
    .active-link {
        color: #ffc107 !important; /* Yellow color for active state */
        font-weight: bold; /* Optional: make text bold when active */
    }

    /* Optional styling for the search input */
    #searchInput {
        max-width: 250px;
    }

    .product-details a {
        display: inline-block;
        padding: 5px 5px; /* Reduce padding to make the button smaller */
        font-size: 10px; /* Smaller font size */
        font-weight: bold;
        color: #fff;
        background-color: #efba6c;
        text-decoration: none; /* Remove underline */
        border-radius: 5px; /* Rounded corners */
        transition: background-color 0.3s ease; /* Smooth hover transition */
    }

        .product-details a:hover {
            background-color: #efba6c; /* Darker blue on hover */
        }

    .filter-container {
        position: relative;
        display: flex;
        align-items: center;
    }

    /* Căn chỉnh các nút lọc con bên trái của nút filter */
    #filterButtons {
        position: absolute;
        right: 100%; /* Đặt bên trái của nút lọc */
        top: 0; /* Căn ngang hàng */
        display: flex;
        flex-direction: row; /* Sắp xếp theo hàng ngang */
        gap: 10px; /* Khoảng cách giữa các nút */
        padding: 5px;
        z-index: 10; /* Đảm bảo các nút lọc nổi lên trên */
        margin-top: -10px;
    }

</style>
<body onload="time()" class="app sidebar-mini rtl">
    <header class="app-header" style="display: flex; align-items: center; padding: 0 15px; background-color: #f6f5f5 !important;">
      

        <!-- Centered Logo -->
        <div style="flex: 500; display: flex; justify-content: center; align-items: center; padding-left: 50px;">
            <img src="~/images/newlogo.jpg" alt="Logo" style="height: auto; width: 55%; max-width: 120px;margin-top: 10px;">
        </div>


        <!-- User Menu -->
        <ul class="app-nav" style="display: flex; align-items: center; margin-left: auto; list-style: none; padding: 0;">
            <li>
                <a class="app-nav__item" href="~/Home" style="display: flex; align-items: center; text-decoration: none; color: black; background: rgb(195 195 195); padding: 10px 15px; border-radius: 5px; transition: background-color 0.3s;">
                    <!-- Replace with an icon -->
                    <i class="bx bx-home" style="font-size: 1.5rem; margin-right: 8px;"></i>
                    <!-- Add text next to the icon -->
                    <span style="font-size: 1rem;">Quay lại trang chủ</span>
                </a>
            </li>
        </ul>

    </header>
     @{
    if (ViewBag.NotificationSuccess != null)
    {
        <div id="notification-success" class="notification alert alert-success" role="alert">
                <i class="fas fa-bell"></i> <!-- Bell Icon -->
                @ViewBag.NotificationSuccess
        </div>
    }
}
@{
    if (ViewBag.NotificationError != null)
    {
        <div id="notification-success" class="notification alert alert-danger" role="alert">
                <i class="fas fa-bell"></i> <!-- Bell Icon -->
                @ViewBag.NotificationError
        </div>
    }
}
<style>
    .notification {
        position: fixed;
        top: 20px; /* Distance from the top */
        right: -350px; /* Start outside the viewport */
        z-index: 1050; /* Ensure it appears above other elements */
        opacity: 1; /* Fully visible initially */
        transition: transform 0.5s ease-out, opacity 1s ease-out; /* Smooth slide and fade effects */
        max-width: 300px; /* Restrict maximum width */
        padding: 15px; /* Padding inside the notification */
        border-radius: 5px; /* Rounded corners */
    }

    /* Success notification styles */
    .alert-success {
        background-color: #d4edda; /* Light green background */
        color: #155724; /* Dark green text */
        border: 1px solid #c3e6cb; /* Green border */
    }

    /* Error notification styles */
    .alert-danger {
        background-color: #f8d7da; /* Light red background */
        color: #721c24; /* Dark red text */
        border: 1px solid #f5c6cb; /* Red border */
    }
</style>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        function showAndHideNotification(selector) {
            if ($(selector).length) {
                // Slide notification into view
                $(selector).css("transform", "translateX(-350px)"); // Slide in
                setTimeout(function () {
                    // Slide notification back out after 5 seconds
                    $(selector).css("transform", "translateX(0)"); // Slide out
                    $(selector).css("opacity", "0"); // Optional fade-out effect
                }, 5000); // Display for 5 seconds before sliding out
            }
        }

        // Show success and error notifications
        showAndHideNotification("#notification-success");
        showAndHideNotification("#notification-error");
    });
</script>
    <!-- Sidebar menu-->
    <div class="app-sidebar__overlay" data-toggle="sidebar"></div>
    <aside class="app-sidebar">
        <a class="app-sidebar__toggle" href="#" data-toggle="sidebar" aria-label="Hide Sidebar" style="margin-right: auto;">
            <!-- Add an icon or text for the sidebar toggle -->
        </a>
        <div class="app-sidebar__user">
            @if (@HttpContextAccessor.HttpContext.Session.GetString("Img") == null)
            {

                <img src="~/images/p22.jpg" alt="Trang cá nhân" class="app-sidebar__user-avatar" width="50px">

            }
            else
            {
                <img src="@HttpContextAccessor.HttpContext.Session.GetString("Img")" alt="Trang cá nhân" class="app-sidebar__user-avatar" src="~/images/img_1.jpg" width="50px">
            }               <div>
                <p class="app-sidebar__user-designation">Xin chào</p>

                <p class="app-sidebar__user-name"><b>@HttpContextAccessor.HttpContext.Session.GetString("Fullname")</b></p>
            </div>
        </div>
        <hr>
        <ul class="app-menu">
            <style>


                .app-menu__item.selected {
                    font-weight: bold;
                }

            </style>
            @if (HttpContextAccessor.HttpContext.Session.GetInt32("RoleId") == 1)
            {
                <li>
                    <a class="app-menu__item" href="~/DashBoard">
                        <i class='app-menu__icon bx bx-task'></i>
                        <span class="app-menu__label">Thống kê</span>
                    </a>
                </li>
            }
            <li class="has-submenu" style="display:block" id="manageOrdersMenu">
                <a class="app-menu__item" href="javascript:void(0)" id="manageOrders">
                    <i class='app-menu__icon bx bx-id-card'></i>
                    <span class="app-menu__label">Quản lý Đơn hàng</span>
                </a>
                <!-- Submenu items -->
                <ul class="submenu" style="display: none;" id="submenuList">
                    <li>
                        <a href="~/OrderManagement/OrderOnline" class="app-menu__item" id="orderOnline">
                            <i class='bx bx-notepad'></i> Đơn đặt trước
                        </a>
                    </li>
                    <li>
                        <a href="~/OrderManagement/OrderUsing" class="app-menu__item" id="orderUsing">
                            <i class='bx bx-time-five'></i> Đơn đang sử dụng
                        </a>
                    </li>
                    <li>
                        <a href="~/OrderManagement/OrderCheckOut" class="app-menu__item" id="orderCheckOut">
                            <i class='bx bx-check-circle'></i> Đơn đã thanh toán
                        </a>
                    </li>
                    <li>
                        <a href="~/OrderManagement/OrderCancel" class="app-menu__item" id="orderCancel">
                            <i class='bx bx-x-circle'></i> Đơn đã hủy
                        </a>
                    </li>
                    <li>
                        <a href="~/OrderManagement/CreateOrder" class="app-menu__item" id="createOrder">
                            <i class='bx bx-plus'></i> Tạo đơn mới
                        </a>
                    </li>
                </ul>
            </li>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const submenu = document.getElementById("submenuList");
                    const manageOrdersMenu = document.getElementById("manageOrdersMenu");
                    const manageOrdersButton = document.getElementById("manageOrders");
                    const submenuItems = document.querySelectorAll("#manageOrdersMenu .submenu .app-menu__item");

                    const currentUrl = window.location.pathname;

                    console.log("Current URL:", currentUrl);

                    // Map submenu items with their corresponding IDs and URLs
                    const menuMappings = {
                        "orderOnline": "/OrderOnline",
                        "orderUsing": "/OrderUsing",
                        "orderCheckOut": "/OrderCheckOut",
                        "orderCancel": "/OrderCancel",
                        "createOrder": "/CreateOrder",
                    };

                    // Reset all submenu items before highlighting
                    submenuItems.forEach(item => {
                        item.classList.remove("selected");
                        console.log("Removed 'selected' class from:", item.id);
                    });

                    // Automatically open submenu and highlight based on URL or localStorage
                    let matched = false; // Flag to track if a match was found
                    for (const [id, path] of Object.entries(menuMappings)) {
                        if (currentUrl.includes(path)) {
                            console.log(`URL match found for path: ${path} (ID: ${id})`);
                            const activeItem = document.getElementById(id);
                            if (activeItem) {
                                activeItem.classList.add("selected"); // Highlight active submenu item
                                console.log("Active submenu item set to:", id);
                                submenu.style.display = "block"; // Keep submenu open
                                console.log("Submenu opened.");
                                manageOrdersMenu.classList.add("selected"); // Highlight parent menu
                                localStorage.setItem("activeSubmenuItem", id); // Save the active submenu item
                                console.log("Saved active submenu item to localStorage:", id);
                            }
                            matched = true;
                            break;
                        }
                    }

                    if (!matched) {
                        console.log("No matching submenu item for the current URL.");
                    }

                    // Restore submenu state and active submenu item on page load
                    const savedActiveItem = localStorage.getItem("activeSubmenuItem");
                    console.log("Saved active item from localStorage:", savedActiveItem);

                    if (!matched && savedActiveItem) {
                        const activeItem = document.getElementById(savedActiveItem);
                        if (activeItem) {
                            activeItem.classList.add("selected");
                            console.log("Restored active submenu item from localStorage:", savedActiveItem);
                            submenu.style.display = "block";
                            console.log("Submenu reopened based on saved state.");
                            manageOrdersMenu.classList.add("selected");
                        }
                    }

                    // Toggle submenu visibility only when clicking the parent menu
                    manageOrdersButton.addEventListener("click", function (event) {
                        event.stopPropagation(); // Prevent event bubbling
                        const isVisible = submenu.style.display === "block";
                        submenu.style.display = isVisible ? "none" : "block";

                        console.log(`Parent menu clicked. Submenu visibility toggled to: ${isVisible ? "hidden" : "visible"}`);

                        if (!isVisible) {
                            // Restore active state if submenu is reopened
                            const savedItem = localStorage.getItem("activeSubmenuItem");
                            if (savedItem) {
                                document.getElementById(savedItem)?.classList.add("selected");
                                console.log("Restored active submenu item on reopening:", savedItem);
                            }
                        }
                    });

                    // Ensure submenu stays open when clicking a submenu item and save active state
                    submenuItems.forEach(item => {
                        item.addEventListener("click", function (event) {
                            submenu.style.display = "block"; // Ensure submenu stays open
                            console.log("Submenu item clicked:", this.id);

                            // Save the clicked submenu item as active
                            submenuItems.forEach(i => {
                                i.classList.remove("selected"); // Remove active class from all items
                                console.log("Removed 'selected' class from:", i.id);
                            });
                            this.classList.add("selected"); // Add active class to clicked item
                            console.log("Set 'selected' class for:", this.id);
                            localStorage.setItem("activeSubmenuItem", this.id); // Save to localStorage
                            console.log("Saved new active submenu item to localStorage:", this.id);
                        });
                    });
                });

            </script>
            <li>
                <a class="app-menu__item" href="~/TicketManagement/Index">
                    <i class='app-menu__icon bx bx-receipt'></i> <!-- Receipt icon as alternative -->
                    <span class="app-menu__label">Quản lý vé</span>
                </a>
            </li>

            <li>
                <a class="app-menu__item" href="~/GearManagement/Index">
                    <i class='app-menu__icon bx bx-wrench'></i> <!-- Gear/Tools icon -->
                    <span class="app-menu__label">Quản lý dụng cụ</span>
                </a>
            </li>
            <li>
                <a class="app-menu__item" href="~/FoodAndDrinkManagement/Index">
                    <i class='app-menu__icon bx bx-coffee'></i> <!-- Food and drink icon -->
                    <span class="app-menu__label">Quản lý đồ ăn</span>
                </a>
            </li>
            <li>
                <a class="app-menu__item" href="~/EventManagement/Index">
                    <i class='app-menu__icon bx bx-calendar-event'></i>
                    <span class="app-menu__label">Quản lý sự kiện</span>
                </a>
            </li>
            @if (HttpContextAccessor.HttpContext.Session.GetInt32("RoleId") == 1)
            {
                <li>
                    <a class="app-menu__item"  href="~/UserManagement/Index">
                        <i class='app-menu__icon bx bx-user-voice'></i>
                        <span class="app-menu__label">Quản lý khách hàng</span>
                    </a>
                </li>
                <li>
                    <a class="app-menu__item"  href="~/EmployeeManagement/Index">
                        <i class='app-menu__icon bx bx-purchase-tag-alt'></i>
                        <span class="app-menu__label">Quản lý nhân viên</span>
                    </a>
                </li>
            }

        </ul>
    </aside>

    <main class="app-content">
        <div class="app-title">
            <ul class="app-breadcrumb breadcrumb side">
                <li class="breadcrumb-item active">Quản lí đơn hàng/Tạo đơn mới/Đặt vé</li>
            </ul>
            <div id="clock"></div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="tile">

                    <div class="tile-body">
                        <div class="top-bar d-flex justify-content-between align-items-center">
                                <!-- Search bar on the left -->
                                <div class="search-container">
                                    <label for="searchInput" class="mr-2 font-weight-bold">Tìm kiếm:</label>
                                    <input type="search" id="searchInput" class="form-control form-control-sm" placeholder="Nhập từ khóa..." aria-controls="sampleTable">
                                </div>


                                
                            <style>
                                .menu {
                                    padding: 10px;
                                    background-color: #f8f9fa; /* Màu nền nhẹ */
                                    border-radius: 8px; /* Bo góc */
                                    display: flex;
                                    justify-content: center; /* Căn giữa các nút */
                                }

                                .menu-items {
                                    display: flex; /* Hiển thị ngang */
                                    gap: 20px; /* Khoảng cách giữa các nút */
                                }

                                .menu-link {
                                    display: flex;
                                    align-items: center;
                                    padding: 10px 15px;
                                    text-decoration: none; /* Bỏ gạch chân */
                                    color: black; /* Màu chữ cơ bản */
                                    border-radius: 4px; /* Bo góc */
                                    transition: all 0.3s ease; /* Hiệu ứng chuyển đổi màu */
                                }

                                    .menu-link:hover {
                                        background-color: #e9ecef; /* Thay đổi màu nền khi hover */
                                        color: #212529; /* Đổi màu chữ khi hover */
                                    }

                                    .menu-link.active {
                                        color: #d99b53; /* Chữ trắng */
                                        font-weight: bold; /* Chữ in đậm */
                                    }

                            </style>
                            </div>
                            
                            <script>
                                function toggleFilterButtons() {
                                    var filterIcon = document.getElementById("filterIcon");
                                    var filterButtons = document.getElementById("filterButtons");

                                    // Ẩn/hiện các nút lọc con
                                    filterButtons.classList.toggle("d-none");

                                    // Đổi biểu tượng khi nhấn
                                    if (filterButtons.classList.contains("d-none")) {
                                        filterIcon.classList.remove("fa-times");
                                        filterIcon.classList.add("fa-ellipsis-v");
                                    } else {
                                        filterIcon.classList.remove("fa-ellipsis-v");
                                        filterIcon.classList.add("fa-times");
                                    }
                                }
                            </script>


                        <form asp-controller="OrderManagement" asp-action="TicketCart" method="get">
                            @foreach (TicketVM item in ViewBag.tickets)
                            {
                                <div class="product-card">
                                    <div class="product-image">
                                        <img src="@item.ImgUrl" alt="Bạc Xỉu">
                                    </div>
                                    <div class="product-details">
                                        <div class="product-name">@item.TicketName</div>
                                        <div class="product-description">Thuộc loại vé @item.TicketCategoryName</div>
                                        <div class="product-price">
                                            @String.Format("{0:0,0} ₫", @item.Price)
                                        </div>
                                        <a asp-controller="OrderManagement" asp-action="TicketDetail" asp-route-id="@item.TicketId" asp-route-quantity="@item.Quantity">Chi tiết</a>

                                    </div>
                                    <div class="quantity-control">
                                        <button class="btn-quantity btn-decrease" type="button">-</button>
                                        <span class="quantity-value">@item.Quantity</span>
                                        <button class="btn-quantity btn-increase" type="button">+</button>
                                        <input type="hidden" class="quantity-input" name="quantity" value="@item.Quantity" />
                                        <input type="hidden" name="id" value="@item.TicketId" />
                                        <input type="hidden" name="name" value="@item.TicketName" />
                                        <input type="hidden" name="price" value="@item.Price" />
                                    </div>
                                </div>
                            }
                        </form>

                        <script>
                            $(document).ready(function () {
                                // Function to submit form data using AJAX
                                function submitForm(id, name, price, quantity) {
                                    const url = `/OrderManagement/TicketDetailCart`;

                                    // Data payload
                                    const data = new URLSearchParams();
                                    data.append("id", id);
                                    data.append("name", name);
                                    data.append("price", price);
                                    data.append("quantity", quantity);

                                    fetch(url, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                        },
                                        body: data.toString()
                                    })
                                        .then(response => response.json())
                                        .then(data => {
                                            console.log('Success:', data);
                                        })
                                        .catch(error => {
                                            console.error('Error:', error);
                                        });
                                }

                                // Increase quantity
                                $('.btn-increase').click(function () {
                                    const quantityInput = $(this).siblings('.quantity-input');
                                    const quantityValue = $(this).siblings('.quantity-value');
                                    let currentQuantity = parseInt(quantityInput.val()) + 1;

                                    // Update displayed and hidden quantity values
                                    quantityInput.val(currentQuantity);
                                    quantityValue.text(currentQuantity);

                                    // Gather necessary data
                                    const id = $(this).siblings('input[name="id"]').val();
                                    const name = $(this).siblings('input[name="name"]').val();
                                    const price = $(this).siblings('input[name="price"]').val();

                                    // Call submitForm
                                    submitForm(id, name, price, currentQuantity);
                                });

                                // Decrease quantity
                                $('.btn-decrease').click(function () {
                                    const quantityInput = $(this).siblings('.quantity-input');
                                    const quantityValue = $(this).siblings('.quantity-value');
                                    let currentQuantity = parseInt(quantityInput.val());

                                    if (currentQuantity >= 1) {  // Prevent quantity from going below 1
                                        currentQuantity -= 1;

                                        // Update displayed and hidden quantity values
                                        quantityInput.val(currentQuantity);
                                        quantityValue.text(currentQuantity);

                                        // Gather necessary data
                                        const id = $(this).siblings('input[name="id"]').val();
                                        const name = $(this).siblings('input[name="name"]').val();
                                        const price = $(this).siblings('input[name="price"]').val();

                                        // Call submitForm
                                        submitForm(id, name, price, currentQuantity);
                                    }
                                });
                            });
                        </script>

                        </div>
                        <div class="container-pagination-cart">
                            

                            <div id="pagination" class="dataTables_paginate paging_simple_numbers">
                                <ul class="pagination">
                                    <li class="paginate_button page-item previous disabled" id="prev-page"><a href="#" class="page-link">Trước</a></li>
                                    <!-- Các nút số trang sẽ được tạo tự động -->
                                    <li class="paginate_button page-item next" id="next-page"><a href="#" class="page-link">Sau</a></li>
                                </ul>
                            </div>
                        </div>
                    
                </div>
            </div>

        </div>
        <div class="d-flex justify-content-between align-items-center">
            <!-- Nút Quay lại ở bên trái -->
            <a href="/OrderManagement/CreateOrder" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Quay lại
            </a>

            <!-- Hai nút còn lại ở bên phải -->
            <div class="d-flex gap-3">
                <a href="~/OrderManagement/OrderGear" style="margin-right:10px" class="btn btn-info">
                    <i class="fas fa-concierge-bell"></i> Đặt tiện ích khác
                </a>
                <a href="~/OrderManagement/Cart" class="btn btn-success">
                    <i class="fas fa-shopping-cart"></i> Tạo đơn ngay
                </a>
            </div>
        </div>

        

    </main>
    <script>

        document.getElementById('manageOrders').addEventListener('click', function () {
            this.parentElement.classList.toggle('open'); // Bật/tắt class 'open' để mở/đóng submenu
        });

    </script>
    <script>
        $(document).ready(function () {
            var itemsPerPage = 3; // Số sản phẩm hiển thị trên mỗi trang
            var currentPage = 1;  // Trang hiện tại
            var totalItems = $('.product-card').length; // Tổng số sản phẩm ban đầu
            var totalPages = Math.ceil(totalItems / itemsPerPage); // Tổng số trang ban đầu

            // Hàm hiển thị sản phẩm cho trang hiện tại
            function showPage(page, items) {
                // Ẩn tất cả sản phẩm
                $('.product-card').hide();

                // Tính toán sản phẩm bắt đầu và kết thúc cho trang hiện tại
                var startItem = (page - 1) * itemsPerPage;
                var endItem = Math.min(startItem + itemsPerPage, items.length); // Đảm bảo không vượt quá số lượng sản phẩm

                // Hiển thị sản phẩm của trang hiện tại
                items.slice(startItem, endItem).show();

                // Cập nhật nút phân trang
                $('#pagination .page-item').removeClass('active');
                $('#pagination .page-item[data-page="' + page + '"]').addClass('active');

                // Kiểm tra trạng thái nút Lùi và Tiếp
                if (page === 1) {
                    $('#prev-page').addClass('disabled');
                } else {
                    $('#prev-page').removeClass('disabled');
                }

                if (page === Math.ceil(items.length / itemsPerPage)) {
                    $('#next-page').addClass('disabled');
                } else {
                    $('#next-page').removeClass('disabled');
                }
            }

            // Hàm cập nhật nút phân trang
            function updatePagination(totalItems) {
                $('#pagination').find('.page-item:not(#prev-page, #next-page)').remove(); // Xóa các nút trang cũ
                var totalPages = Math.ceil(totalItems / itemsPerPage); // Tính lại tổng số trang

                // Tạo các nút phân trang
                for (var i = 1; i <= totalPages; i++) {
                    $('<li class="paginate_button page-item" data-page="' + i + '"><a href="#" class="page-link">' + i + '</a></li>').insertBefore('#next-page');
                }
            }

            // Xử lý sự kiện tìm kiếm
            $('#searchInput').on('keyup', function () {
                var searchValue = $(this).val().toLowerCase();

                // Lọc sản phẩm dựa trên giá trị tìm kiếm
                var filteredItems = $('.product-card').filter(function () {
                    return $(this).text().toLowerCase().indexOf(searchValue) > -1;
                });

                if (filteredItems.length > 0) {
                    // Nếu có tìm kiếm và kết quả tìm thấy
                    updatePagination(filteredItems.length); // Cập nhật lại phân trang dựa trên số lượng kết quả
                    currentPage = 1; // Đặt lại trang hiện tại về 1
                    showPage(currentPage, filteredItems); // Hiển thị sản phẩm sau khi tìm kiếm
                } else {
                    // Nếu không có kết quả tìm kiếm, ẩn toàn bộ sản phẩm và làm trống phân trang
                    $('.product-card').hide();
                    $('#pagination').find('.page-item:not(#prev-page, #next-page)').remove(); // Xóa các nút trang
                }
            });

            // Xử lý sự kiện khi bấm vào các nút số trang
            $('#pagination').on('click', '.page-item', function (e) {
                e.preventDefault();
                var page = $(this).data('page');
                if (page) {
                    currentPage = page;
                    var items = $('#searchInput').val() ? $('.product-card').filter(function () {
                        return $(this).text().toLowerCase().indexOf($('#searchInput').val().toLowerCase()) > -1;
                    }) : $('.product-card');
                    showPage(currentPage, items);
                }
            });

            // Xử lý sự kiện khi bấm vào nút Lùi
            $('#prev-page').click(function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    var items = $('#searchInput').val() ? $('.product-card').filter(function () {
                        return $(this).text().toLowerCase().indexOf($('#searchInput').val().toLowerCase()) > -1;
                    }) : $('.product-card');
                    showPage(currentPage, items);
                }
            });

            // Xử lý sự kiện khi bấm vào nút Tiếp
            $('#next-page').click(function (e) {
                e.preventDefault();
                var items = $('#searchInput').val() ? $('.product-card').filter(function () {
                    return $(this).text().toLowerCase().indexOf($('#searchInput').val().toLowerCase()) > -1;
                }) : $('.product-card');
                var totalItems = items.length;
                var totalPages = Math.ceil(totalItems / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage, items);
                }
            });

            // Hiển thị trang đầu tiên khi tải trang
            updatePagination(totalItems); // Khởi tạo nút phân trang ban đầu
            showPage(currentPage, $('.product-card')); // Hiển thị sản phẩm ban đầu
        });


    </script>
   
    <script src="~/js/jquery-3.2.1.min.js"></script>
    <script src="~/js/popper.min.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="~/src/jquery.table2excel.js"></script>
    <script src="~/js/main.js"></script>
    <!-- The javascript plugin to display page loading on top-->
    <script src="js/plugins/pace.min.js"></script>
    <!-- Page specific javascripts-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.js"></script>
    <!-- Data table plugin-->
    <script type="text/javascript" src="~/js/plugins/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="~/js/plugins/dataTables.bootstrap.min.js"></script>
    <script type="text/javascript">$('#sampleTable').DataTable();</script>
    <script>

        oTable = $('#sampleTable').dataTable();
        $('#all').click(function (e) {
            $('#sampleTable tbody :checkbox').prop('checked', $(this).is(':checked'));
            e.stopImmediatePropagation();
        });


        function time() {
            var today = new Date();
            var weekday = new Array(7);
            weekday[0] = "Chủ Nhật";
            weekday[1] = "Thứ Hai";
            weekday[2] = "Thứ Ba";
            weekday[3] = "Thứ Tư";
            weekday[4] = "Thứ Năm";
            weekday[5] = "Thứ Sáu";
            weekday[6] = "Thứ Bảy";
            var day = weekday[today.getDay()];
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            var h = today.getHours();
            var m = today.getMinutes();
            var s = today.getSeconds();
            m = checkTime(m);
            s = checkTime(s);
            nowTime = h + " giờ " + m + " phút " + s + " giây";
            if (dd < 10) {
                dd = '0' + dd
            }
            if (mm < 10) {
                mm = '0' + mm
            }
            today = day + ', ' + dd + '/' + mm + '/' + yyyy;
            tmp = '<span class="date"> ' + today + ' - ' + nowTime +
                '</span>';
            document.getElementById("clock").innerHTML = tmp;
            clocktime = setTimeout("time()", "1000", "Javascript");

            function checkTime(i) {
                if (i < 10) {
                    i = "0" + i;
                }
                return i;
            }
        }
        ;
    </script>
</body>

</html>
